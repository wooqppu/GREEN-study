
230619 jsp


Apache Tomcat 설치 
다운로드 -> Tomcat8 -> Core -> zip 다운, 설치 -> C드라이브로 이동 
C:\apache-tomcat-8.5.90\apache-tomcat-8.5.90\bin-startup.bat (CMD창)

(오라클이랑 경로 겹치면 conf -> server.xml 메모로 연결해서 들어가기 -> 
아래의 해당 부분처럼 숫자 8080을 8000으로 바꾸기

<Connector port="8000" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443"
               maxParameterCount="1000"
               />
    <!-- A "Connector" using the shared thread pool-->
    <!--
    <Connector executor="tomcatThreadPool"
               port="8000" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443"
               maxParameterCount="1000"
               />
 )

그 후 주소창에 http://localhost:8000 입력해서 창 뜨는지 확인 
C:\apache-tomcat-8.5.90\apache-tomcat-8.5.90\webapps 
해당 파일에서 만든 자료들 볼 수 있음 


JSP 컨테이너 -> 톰캣 (JSP, Servlet의 공식적인 컨테이너)
JSP를 사용하기 위해서는 웹 서버와 JSP 컨테이너가 필요함
JSP 컨테이너는 JSP를 동작할 수 있도록하는 웹 서버 
동적 페이지 생성을 맡아서 처리할 프로그램으로 
JSP 페이지에 대한 요청을 처리함 

톰캣은 독립적으로 웹서버(Apache)와 연동 가능함



https://www.coupang.com/vp/products/1914221?itemId=11348005
&vendorItemId=3011813264
&sourceType=cmgoms
&omsPageId=s23782
&omsPageUrl=s23782
&isAddedCart=


1. url 구성요소 

https 프로토콜 
웹 브라우저가 서버와 내용을 주고받을 때 사용할 규칙 이름 

www.coupang.com (도메인) 
서버이름 (서버 주소)
웹 페이지를 요청할 서버의 이름 

vp/products/1914221
경로
웹 페이지의 상세 주소 (웹 페이지마다 다른 경로를 가짐)

?itemId=11348005
쿼리 문자열 
서버에 보내줘야하는 데이터
같은 경로라고 하더라도 입력한 값에 따라 다른 결과를 
보여줘야할 때 쿼리 문자열을 사용함 

포트 번호 : 다른 서버 프로그램과 구분할 수 있도록 사용 
(숫자로 된 번호, 서버 프로그램마다 다른 번호를 사용함
웹 서버의 기본 포트 번호 - 80) 


2. 웹 브라우저와 웹 서버 
	ip 주소 요청
naver.com ----> dns(domain name server)
	ip 주소 응답 

ip 주소로 웹 서버에게 요청 
html 페이지 응답 


웹의 동작 
요청 (request) : 클라이언트에서 서버로 정보를 요구하기 위해 보내는 메세지
GET방식, POST방식 

응답 (response) : HTTP에서 요구된 메세지에 대한 응답, 
HTML, 이미지 등이 응답의 내용임



아래 경로로 폴더 생성 후 vscode실행, 생성한 폴더 열기 ->
C:\apache-tomcat-8.5.90\apache-tomcat-8.5.90\webapps\chap01

time.jsp 파일 만들기 -> 

아래의 코드 입력 ->
<%@ page contentType="text/html; charset=utf-8"%>
<html>
    <head><title>현재시간</title></head>
    <body>
        지금 : <%=new java.util.Date() %>
    </body>
</html>

http://localhost:8000 주소창 뒤에 /chap01/time.jsp 입력해서 시간 뜨는지 확인



3. 정적자원과 동적자원

- 정적 페이지, 정적자원 
파일이 변경되기 전까지 고정된 결과가 출력되는 페이지 
주로 이미지 파일이나 html파일과 같이 자주 변경되지 않는 것들을 
정적자원이라고 함

- 동적 페이지, 동적자원 
자도응로 생성된 페이지, 기존의 웹 서버에 새로운 기능을 가진 
프로그램을 탑재하여 동적으로 HTML을 생성
정적자원과 달리 파일의 코드를 변경하지 않아도 조건에 따라 
응답 데이터를 전송함 
시간이나 특정 조건에 따라 응답 데이터가 달라지는 자원을 동적자원이라고 함
ex> jsp, php, asp, .net : 동적 페이지를 만드는데 사용되는 프로그래밍 기술 



CGI : 동적 컨텐츠 처리를 위한 가장 전통적인 방법 
프로세스 단위로 실행되기 때문에 사용자 증가 시 급격한 성능 저하 발생 


확장 CGI (ASP, PHP, JSP)
javaserver pages ---> jsp
동적 페이지를 작성하는데 사용되는 자바의 표준 기술 
html 응답을 생성하는데 필요한 기능을 제공 



jsp페이지의 구성요소

1) 디렉티브
jsp페이지에 대한 설정 정보를 지정할 때 사용함 
<%@ page contentType="text/html; charset=utf-8"%>

page : jsp페이지에 대한 정보를 지정, jsp가 생성하는 문서의 타입, 
문자인코딩, 출력 버퍼의 크기, 에러 페이지 등 jsp페이지에서 필요로 하는   
정보를 설정

include : jsp페이지의 특정 영역에 다른 문서를 포함시킴


2) 스크립트 : 스크립트릿, 표현식, 선언부 
문서의 내용을 동적으로 생성하기 위해 사용
 
스크립트 요소를 사용하면 사용자가 폼에 입력한 정보를 
데이터베이스에 저장할 수 있음 
또한 스크립트를 사용하면 자바가 제공하는 다양한 기능 사용 가능 

표현식 : 값을 출력 
구문 - <%=값%>

스크립트릿 : 자바 코드를 실행 
<%자바코드%>

선언부 : 자바 메소드를 만듬 
<%! public 리턴타입 메소드 이름 (파라미터 목록) { 
	자바코드;
	return 값;
 } %>


3) 표현언어 

4) 기본객체 

5) 정적 데이터 

6) 표준 액션 태그 

7) 커스텀 태그와 표준 태그 라이브러리(JSTL)






230620 jsp


서블릿 : JSP 이전 세대의 동적 웹페이지 생성 언어 
(Server + Applet의 합성어)
브라우저에서 호출하면 WAS에서 웹 페이지를 동적으로 생성 

WAS : 서버 단에서 애플리케이션이 동작할 수 있도록 지원하는 
컨테이너가 포함된 서버 (ex -> 톰캣)


디렉티브
jsp페이지에 대한 설정 정보를 지정
<%@ page 속성="속성값"%>

contentType - jsp가 생성하는 문서의 타입과 인코딩을 지정
include - jsp페이지에 다른 문서를 포함시킴 


스크립트 
표현식 
<%=val%>

선언문
<%!
	메소드
%>
 
스크립트릿 
<%
	자바코드
%>


스크립트 요소 : JSP 프로그래밍에서 사용되는 문법의 형태 

스크립트 요소 종류 
선언문, 스크립트릿, 표현식, 주석


1. 선언문 : JSP에서 사용될 변수나 메소드를 선언할 수 있는 영역들의 요소 
JSP 페이지 내에서 변수 및 메소드 선언 후 변수나 메소드를 이용하여 
동적으로 필요한 HTML코드 생성하는데 사용 

멤버 변수(클래스 변수) : 선언문에 선언된 변수 
선언문에서 선언된 변수로 호칭하는 것은 자바에서 
변수의 종류가 여러가지 있다는 의미

선언문에서 선언된 변수는 JSP 페이지가 서블릿 코드로 
변환되면 서블릿 클래스의 멤버 변수로 변환됨 

선언문에서 선언된 메소드는
JSP 페이지 내에서는 일반적인 형태의 메소드로 선언됨 


2.  스크립트릿 : JSP 페이지가 서블릿으로 변환, 요청될 때
_jspService 메소드 안에 선언되는 요소 

스크립트릿은 선언문과 달리 선언된 변수는 
지역 변수(로컬변수)로 선언되고 메소드 선언은 할 수 없음 
-> 만약 선언한다면 메소드 안에 메소드를 선언한 것이 되기 때문에 만들 수 없음  


3. 표현식 : 동적인 JSP 페이지를 브라우저로 표현하기 위한 요소

변수를 출력하거나 메소드의 결과 값을 브라우저에 출력할 수 있음 

스크립트릿 코드 내에서 out이라는 내장객체를 통해
브라우저에 출력 가능함 

스크립트릿과 달리 변수나 메소드를 출력할 때 세미콜론 표기하지 않음
(서블릿 코드로 변환될 때 자동으로 세미콜론 붙여짐)


4. 주석 : 프로그램에 직접적인 영향을 미치진 않지만 개발자들의
소스 분석 내용 및 파일 설명 처리를 위해서는 꼭 필요한 요소




request 기본객체 
웹 브라우저의 요청을 담당
- 서버와 관련된 정보 읽기 
- 클라이언트가 전송한 요청 데이터 읽기
- 클라이언트 관련된 정보 읽기 
- 속성 처리 기능 


클라이언트 및 서버 정보 관련 메소드
 
getRemoteAdd() 	String 	웹 서버에 연결한 클라이언트 ip주소를 반환
getContentLength()   long	클라이언트가 전송한 요청 정보의 길이를 구함
 getCharacterEncoding()   String    클라이언트가 요청 정보를 전송할 때 사용한 
캐릭터의 인코딩을 리턴 
getContentType()	String    클라이언트가 요청 정보를 전송할 때 사용한
컨텐츠의 인코딩을 리턴 
getMethod()	String	정보를 전송할 때 사용한 방식을 리턴


