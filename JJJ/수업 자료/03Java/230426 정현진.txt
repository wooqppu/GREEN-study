참조타입 
배열, 클래스 

객체 : 속성(필드) + 동작(메소드)
클래스 : 자바의 설계도 
인스턴스 : 클래스로부터 만들어진 객체 

클래스로부터 객체 생성 
클래스 변수 = new 클래스();
ex> Car car1 = new Car();

클래스 용도 
1) 라이브러리(API) 클래스 : 객체 생성 및 메소드 제공 역할 - Student.java
2) 실행 클래스 : main()메소드 제공 역할 - StudentExan.java

클래스 멤버 
1. 필드 - 객체의 고유 데이터 (객체가 가져야할 부품, 객체의 현재 상태 데이터 등)
---> 필드 선언으로 기본값 할당, 초기값 설정 가능 (생략 시 자동으로 기본 초기값 설정)
2. 생성자 - 객체의 데이터 초기화 (new 연산자로 호출되는 중괄호{} 블록)
---> 기본 생성자 : 클래스 내부에 자동으로 생성 
---> 명시적으로 생성자 선언 시 기본 생성자 생성되지 않음 - 반드시 명시적 생성자 호출 필요
---> 매개변수와 필드 명이 같을 때 this.name(필드) = name(생성자) 
3. 메소드 - 객체의 동작 실행 

void로 지정한 메소드 ---> 리턴 필요없음
리턴타입 메소드이름(매개변수) { return };
int add(int x, int y) { return x + y; }

Circle circle1 = new Circle(5.23);
Circle circle2 = new Circle(2.35);

라이브러리 클래스 
실행클래스  - main메소드 포함 


인스턴스 멤버 : 객체가 있어야 호출 가능 
-> 객체 생성 후 사용할 수 있는 필드와 메소드
정적 멤버 : 클래스에 고정된 멤버, 메소드에 위치, 
-> 객체 없이도 클래스만으로 호출 가능, static을 붙여줌 

final 키워드 
1. final 필드 ---> 초기화 후 수정 불가능
1) 필드 선언 시 초기화 
final String nation = "대한민국"
2) 생성자 선언시 초기화 
final string nation;
public 클래스명(String nation) { this.nation = nation; }
 
2. static final 상수(불변값) ---> 초기화 후 수정 불가능 
(상수 명은 보통 전부 대문자로)
1) 상수 선언시 초기화
static final double EARTH_RADIUS = 6400; 
2) 정적 블럭 초기화 
static final double PI;
static { PI = 3.14; }


패키지 : 클래스의 일부분으로, 클래스를 유일하게 만들어주는 식별자 역할
(클래스의 이름이 같아도 패키지 이름이 다르면 구분 가능)
hankoon패키지 - Tire클래스
kumho패키지 - Tire클래스
hyundai패키지 - Car클래스
- 클래스의 전체 이름은 패키지+클래스 사용해서 표현 (상위패키지.하위패키지.클래스)
- 패키지 이름은 모두 소문자로 작성하는 것이 관례
- import문 : 사용할 클래스나 인터페이스가 다른 패키지에 소속될 경우 사용 
(하위 패키지는 별도로 import 해야함)

클래스 접근 지정자
접근 제한자 : 클래스와 인터페이스 및 이들이 가진 멤버의 접근 제한
public : 외부클래스가 자유롭게 사용하도록 허용
protected : 같은 패키지나 자식 클래스에서 사용 허용
default : 같은 패키지 소속된 클래스에서만 사용 허용 (따로 작성하지 않으면 default가 기준) 
private : 외부에서 사용 불가 (내부만 가능)

생성자 접근 지정자 : 생성자 접근 제한에 따라 생성자 호출 가능 여부 결정 

클래스 접근 지정자
- public
- default

싱글톤 패턴 
: 단 1개의 객체만 생성해서 사용하고 싶을 때 
생성자를 private 외부에서 객체를 생성할 수 없게 함
정적 메소드를 통해 간접적으로 객체를 얻을 수 있게 함 

















